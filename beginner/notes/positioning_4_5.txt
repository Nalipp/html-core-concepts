lesson 4 / opening the box model
lesson 5 / positioning content

display
the box model
positioning with floats
positioning with the position property

****************************************************************
display

	all elements have a display property
		most common (block, inline, inline-block, none
		block					=> takes up the entire available width and breaks into another line
		inline				=> only takes up space for the size of the element
		inline-block  => behaves as the block element but dosen't break into another line and has same styling rules as inline  


****************************************************************
the box model

	calculating the box size
		core		=> display property, element size, width / height values
		padding
		border
		margin

	the size of the box (width and height) is calculated using an additive approach
	so a box with a width of 200px will be 200px plus the right and left padding, border, and margin

		box-sizing changes the rules for calculating the box size
			box-sizing: content-box; => is the default (additive) 
			box-sizing: padding-box; => padding is included in width and heigth calculations
		  box-sizing: border-box;  => (best) padding and border is included in the calculations 
				(note margin is never included in any of the box-sizing elements)

	
	manipulating the size of the box

	width
	  inline elements cannot have a specified width because they expand and contract according to the size of the contents
		only block and inline-block level elements can have a width value

	height
		inline height expands and contracts acording to the contents of the element
		only block and inline-block level elements can have a height value

	margin
		inline elements cannot have top and bottom margins 
		block and inline-block margins can have margin-top: and margin-bottom: properties

	padding
		is accepted by both block and inline level elements however it sometimes bleeds into the above or below elements

		
****************************************************************
positioning with floats

floats allow you to remove an element from the normal flow of the page to the right or left of the parent element
	surrounding elements wrap around the floated element
		float property values:
			float: left;
			float: right;

the final floated element needs to clear the before floated elements using the clear property.
		clear: right;
		clear: left;
		clear: both; (most common)

clearfix ensures that elements will be styled properly
	clearfix example

	.group:before,
	.group:after {
		content: "";
		display: table;
	}
	.group:after {
	clear: both;
	}
	.group {
	clear: both;
 *zoom: 1;
	}


****************************************************************
positioning with inline-block

	an alternative method for displaying elements on a page is to use the display property with value inline-block
	inline-block method is especially usefull when displaying elements in a row
	unlike display: inline; inline-block accepts all box model properties (height, width, margin, border, padding) 
	unlike display: block; inline-block does not have to take up the entire line

	downsode to the inlin-block method is that it leaves spaces between elements so that the width percentages may not add up

	two ways to fix the spaces:

	method 1:

	alter the html to remove the spaces so that opening tags are pushed up agains previous closing tags
		instead of 
	  	<div>
			</div>
			<div>
			</div>
		use this instead
			<div>
			</div><div>
			</div

	method 2:

	comment out the spaces between the html
		instead of 
			<div>
			</div>
			<div>
			</div>
		use this instead
			<div><!--
			--></div>
			<div><!--
			--></div>
			

****************************************************************
positioning with the position property

	*most positioning can be acheived without the position property or box-offset properties but they can be useful for more precision or annimations

	review
		floats position elements to the right or left of an existing element. The existing element wraps around the floated element
		positioning with inline-block is great for position elements in columns or grid style format
		the position property combined with the box-offset properties allows us to be more precise when positioning elements on a page

		position property
			identifies how an element is positioned on the page and whether it is in the normal flow of the page
				static   => (default) in the normal flow of the document and cannot accept box-offset properties
				relative => is in the normal flow of the page and space is always reserved for the element but it can be moved using the box-offset properties
										an entire block is still reserved for the space and elements do not flow around it
										the box-offset properties are positioned according to the original reserved space of the element
										when positioned with the box-offset properties the element does not push other elements around the page, but overlaps them
				absolute => never appears within the folow of the document and original space is not reserved
										the box-offset properties are positioned according to the next available parent element with position: relative;
										if no parent element has the position of relative declared the box-offset propertys with attach to the body 

		box-offset properties (top, right, left, bottom)
			the box-offset property is used together with the position property 
  
